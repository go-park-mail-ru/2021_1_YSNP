// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_YSNP/internal/app/product (interfaces: ProductRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// DeleteProductLike mocks base method.
func (m *MockProductRepository) DeleteProductLike(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductLike indicates an expected call of DeleteProductLike.
func (mr *MockProductRepositoryMockRecorder) DeleteProductLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductLike", reflect.TypeOf((*MockProductRepository)(nil).DeleteProductLike), arg0, arg1)
}

// Insert mocks base method.
func (m *MockProductRepository) Insert(arg0 *models.ProductData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockProductRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProductRepository)(nil).Insert), arg0)
}

// InsertPhoto mocks base method.
func (m *MockProductRepository) InsertPhoto(arg0 *models.ProductData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPhoto", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPhoto indicates an expected call of InsertPhoto.
func (mr *MockProductRepositoryMockRecorder) InsertPhoto(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPhoto", reflect.TypeOf((*MockProductRepository)(nil).InsertPhoto), arg0)
}

// InsertProductLike mocks base method.
func (m *MockProductRepository) InsertProductLike(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProductLike indicates an expected call of InsertProductLike.
func (mr *MockProductRepositoryMockRecorder) InsertProductLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductLike", reflect.TypeOf((*MockProductRepository)(nil).InsertProductLike), arg0, arg1)
}

// SelectAuthLatest mocks base method.
func (m *MockProductRepository) SelectAuthLatest(arg0 uint64, arg1 *models.Page) ([]*models.ProductListData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectAuthLatest", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectAuthLatest indicates an expected call of SelectAuthLatest.
func (mr *MockProductRepositoryMockRecorder) SelectAuthLatest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectAuthLatest", reflect.TypeOf((*MockProductRepository)(nil).SelectAuthLatest), arg0, arg1)
}

// SelectByID mocks base method.
func (m *MockProductRepository) SelectByID(arg0 uint64) (*models.ProductData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", arg0)
	ret0, _ := ret[0].(*models.ProductData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockProductRepositoryMockRecorder) SelectByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockProductRepository)(nil).SelectByID), arg0)
}

// SelectLatest mocks base method.
func (m *MockProductRepository) SelectLatest(arg0 *models.Page) ([]*models.ProductListData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLatest", arg0)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLatest indicates an expected call of SelectLatest.
func (mr *MockProductRepositoryMockRecorder) SelectLatest(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLatest", reflect.TypeOf((*MockProductRepository)(nil).SelectLatest), arg0)
}

// SelectUserAd mocks base method.
func (m *MockProductRepository) SelectUserAd(arg0 uint64, arg1 *models.Page) ([]*models.ProductListData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserAd", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserAd indicates an expected call of SelectUserAd.
func (mr *MockProductRepositoryMockRecorder) SelectUserAd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserAd", reflect.TypeOf((*MockProductRepository)(nil).SelectUserAd), arg0, arg1)
}

// SelectUserFavorite mocks base method.
func (m *MockProductRepository) SelectUserFavorite(arg0 uint64, arg1 *models.Page) ([]*models.ProductListData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserFavorite", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserFavorite indicates an expected call of SelectUserFavorite.
func (mr *MockProductRepositoryMockRecorder) SelectUserFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserFavorite", reflect.TypeOf((*MockProductRepository)(nil).SelectUserFavorite), arg0, arg1)
}

// UpdateTariff mocks base method.
func (m *MockProductRepository) UpdateTariff(arg0 uint64, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTariff", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTariff indicates an expected call of UpdateTariff.
func (mr *MockProductRepositoryMockRecorder) UpdateTariff(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTariff", reflect.TypeOf((*MockProductRepository)(nil).UpdateTariff), arg0, arg1)
}
