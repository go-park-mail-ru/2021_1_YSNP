// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_YSNP/internal/app/product (interfaces: ProductRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// CheckProductReview mocks base method.
func (m *MockProductRepository) CheckProductReview(arg0 uint64, arg1 string, arg2 uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductReview", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckProductReview indicates an expected call of CheckProductReview.
func (mr *MockProductRepositoryMockRecorder) CheckProductReview(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductReview", reflect.TypeOf((*MockProductRepository)(nil).CheckProductReview), arg0, arg1, arg2)
}

// Close mocks base method.
func (m *MockProductRepository) Close(arg0 *models.ProductData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProductRepositoryMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProductRepository)(nil).Close), arg0)
}

// Delete mocks base method.
func (m *MockProductRepository) Delete(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductRepository)(nil).Delete), arg0)
}

// DeleteProductLike mocks base method.
func (m *MockProductRepository) DeleteProductLike(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProductLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProductLike indicates an expected call of DeleteProductLike.
func (mr *MockProductRepositoryMockRecorder) DeleteProductLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProductLike", reflect.TypeOf((*MockProductRepository)(nil).DeleteProductLike), arg0, arg1)
}

// Insert mocks base method.
func (m *MockProductRepository) Insert(arg0 *models.ProductData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockProductRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockProductRepository)(nil).Insert), arg0)
}

// InsertPhoto mocks base method.
func (m *MockProductRepository) InsertPhoto(arg0 *models.ProductData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertPhoto", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertPhoto indicates an expected call of InsertPhoto.
func (mr *MockProductRepositoryMockRecorder) InsertPhoto(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertPhoto", reflect.TypeOf((*MockProductRepository)(nil).InsertPhoto), arg0)
}

// InsertProductBuyer mocks base method.
func (m *MockProductRepository) InsertProductBuyer(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductBuyer", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProductBuyer indicates an expected call of InsertProductBuyer.
func (mr *MockProductRepositoryMockRecorder) InsertProductBuyer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductBuyer", reflect.TypeOf((*MockProductRepository)(nil).InsertProductBuyer), arg0, arg1)
}

// InsertProductLike mocks base method.
func (m *MockProductRepository) InsertProductLike(arg0, arg1 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertProductLike", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertProductLike indicates an expected call of InsertProductLike.
func (mr *MockProductRepositoryMockRecorder) InsertProductLike(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertProductLike", reflect.TypeOf((*MockProductRepository)(nil).InsertProductLike), arg0, arg1)
}

// InsertReview mocks base method.
func (m *MockProductRepository) InsertReview(arg0 *models.Review) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertReview", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertReview indicates an expected call of InsertReview.
func (mr *MockProductRepositoryMockRecorder) InsertReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertReview", reflect.TypeOf((*MockProductRepository)(nil).InsertReview), arg0)
}

// SelectByID mocks base method.
func (m *MockProductRepository) SelectByID(arg0 uint64) (*models.ProductData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", arg0)
	ret0, _ := ret[0].(*models.ProductData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockProductRepositoryMockRecorder) SelectByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockProductRepository)(nil).SelectByID), arg0)
}

// SelectLatest mocks base method.
func (m *MockProductRepository) SelectLatest(arg0 *uint64, arg1 *models.Page) ([]*models.ProductListData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectLatest", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectLatest indicates an expected call of SelectLatest.
func (mr *MockProductRepositoryMockRecorder) SelectLatest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectLatest", reflect.TypeOf((*MockProductRepository)(nil).SelectLatest), arg0, arg1)
}

// SelectProductReviewers mocks base method.
func (m *MockProductRepository) SelectProductReviewers(arg0, arg1 uint64) ([]*models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectProductReviewers", arg0, arg1)
	ret0, _ := ret[0].([]*models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectProductReviewers indicates an expected call of SelectProductReviewers.
func (mr *MockProductRepositoryMockRecorder) SelectProductReviewers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectProductReviewers", reflect.TypeOf((*MockProductRepository)(nil).SelectProductReviewers), arg0, arg1)
}

// SelectTrands mocks base method.
func (m *MockProductRepository) SelectTrands(arg0 []uint64, arg1 *uint64) ([]*models.ProductListData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectTrands", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectTrands indicates an expected call of SelectTrands.
func (mr *MockProductRepositoryMockRecorder) SelectTrands(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectTrands", reflect.TypeOf((*MockProductRepository)(nil).SelectTrands), arg0, arg1)
}

// SelectUserAd mocks base method.
func (m *MockProductRepository) SelectUserAd(arg0 uint64, arg1 *models.Page) ([]*models.ProductListData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserAd", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserAd indicates an expected call of SelectUserAd.
func (mr *MockProductRepositoryMockRecorder) SelectUserAd(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserAd", reflect.TypeOf((*MockProductRepository)(nil).SelectUserAd), arg0, arg1)
}

// SelectUserFavorite mocks base method.
func (m *MockProductRepository) SelectUserFavorite(arg0 uint64, arg1 *models.Page) ([]*models.ProductListData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserFavorite", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserFavorite indicates an expected call of SelectUserFavorite.
func (mr *MockProductRepositoryMockRecorder) SelectUserFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserFavorite", reflect.TypeOf((*MockProductRepository)(nil).SelectUserFavorite), arg0, arg1)
}

// SelectUserReviews mocks base method.
func (m *MockProductRepository) SelectUserReviews(arg0 uint64, arg1 string, arg2 *models.PageWithSort) ([]*models.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUserReviews", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUserReviews indicates an expected call of SelectUserReviews.
func (mr *MockProductRepositoryMockRecorder) SelectUserReviews(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUserReviews", reflect.TypeOf((*MockProductRepository)(nil).SelectUserReviews), arg0, arg1, arg2)
}

// SelectWaitingReviews mocks base method.
func (m *MockProductRepository) SelectWaitingReviews(arg0 uint64, arg1 string, arg2 *models.Page) ([]*models.WaitingReview, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWaitingReviews", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.WaitingReview)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWaitingReviews indicates an expected call of SelectWaitingReviews.
func (mr *MockProductRepositoryMockRecorder) SelectWaitingReviews(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWaitingReviews", reflect.TypeOf((*MockProductRepository)(nil).SelectWaitingReviews), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockProductRepository) Update(arg0 *models.ProductData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockProductRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProductRepository)(nil).Update), arg0)
}

// UpdateProductLikes mocks base method.
func (m *MockProductRepository) UpdateProductLikes(arg0 uint64, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductLikes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductLikes indicates an expected call of UpdateProductLikes.
func (mr *MockProductRepositoryMockRecorder) UpdateProductLikes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductLikes", reflect.TypeOf((*MockProductRepository)(nil).UpdateProductLikes), arg0, arg1)
}

// UpdateProductViews mocks base method.
func (m *MockProductRepository) UpdateProductViews(arg0 uint64, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProductViews", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProductViews indicates an expected call of UpdateProductViews.
func (mr *MockProductRepositoryMockRecorder) UpdateProductViews(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProductViews", reflect.TypeOf((*MockProductRepository)(nil).UpdateProductViews), arg0, arg1)
}

// UpdateTariff mocks base method.
func (m *MockProductRepository) UpdateTariff(arg0 uint64, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTariff", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTariff indicates an expected call of UpdateTariff.
func (mr *MockProductRepositoryMockRecorder) UpdateTariff(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTariff", reflect.TypeOf((*MockProductRepository)(nil).UpdateTariff), arg0, arg1)
}
