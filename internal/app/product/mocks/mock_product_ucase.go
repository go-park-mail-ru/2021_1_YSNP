// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_YSNP/internal/app/product (interfaces: ProductUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	multipart "mime/multipart"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/models"
	errors "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/tools/errors"
	gomock "github.com/golang/mock/gomock"
)

// MockProductUsecase is a mock of ProductUsecase interface.
type MockProductUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProductUsecaseMockRecorder
}

// MockProductUsecaseMockRecorder is the mock recorder for MockProductUsecase.
type MockProductUsecaseMockRecorder struct {
	mock *MockProductUsecase
}

// NewMockProductUsecase creates a new mock instance.
func NewMockProductUsecase(ctrl *gomock.Controller) *MockProductUsecase {
	mock := &MockProductUsecase{ctrl: ctrl}
	mock.recorder = &MockProductUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductUsecase) EXPECT() *MockProductUsecaseMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockProductUsecase) Close(arg0, arg1 uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0, arg1)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockProductUsecaseMockRecorder) Close(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockProductUsecase)(nil).Close), arg0, arg1)
}

// Create mocks base method.
func (m *MockProductUsecase) Create(arg0 *models.ProductData) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockProductUsecaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProductUsecase)(nil).Create), arg0)
}

// CreateProductReview mocks base method.
func (m *MockProductUsecase) CreateProductReview(arg0 *models.Review) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProductReview", arg0)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// CreateProductReview indicates an expected call of CreateProductReview.
func (mr *MockProductUsecaseMockRecorder) CreateProductReview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProductReview", reflect.TypeOf((*MockProductUsecase)(nil).CreateProductReview), arg0)
}

// Delete mocks base method.
func (m *MockProductUsecase) Delete(arg0 uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProductUsecaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProductUsecase)(nil).Delete), arg0)
}

// DislikeProduct mocks base method.
func (m *MockProductUsecase) DislikeProduct(arg0, arg1 uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DislikeProduct", arg0, arg1)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// DislikeProduct indicates an expected call of DislikeProduct.
func (mr *MockProductUsecaseMockRecorder) DislikeProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DislikeProduct", reflect.TypeOf((*MockProductUsecase)(nil).DislikeProduct), arg0, arg1)
}

// Edit mocks base method.
func (m *MockProductUsecase) Edit(arg0 *models.ProductData) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Edit", arg0)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockProductUsecaseMockRecorder) Edit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockProductUsecase)(nil).Edit), arg0)
}

// GetByID mocks base method.
func (m *MockProductUsecase) GetByID(arg0 uint64) (*models.ProductData, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0)
	ret0, _ := ret[0].(*models.ProductData)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockProductUsecaseMockRecorder) GetByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockProductUsecase)(nil).GetByID), arg0)
}

// GetProduct mocks base method.
func (m *MockProductUsecase) GetProduct(arg0 uint64) (*models.ProductData, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0)
	ret0, _ := ret[0].(*models.ProductData)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockProductUsecaseMockRecorder) GetProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockProductUsecase)(nil).GetProduct), arg0)
}

// GetProductReviewers mocks base method.
func (m *MockProductUsecase) GetProductReviewers(arg0, arg1 uint64) ([]*models.UserData, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductReviewers", arg0, arg1)
	ret0, _ := ret[0].([]*models.UserData)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetProductReviewers indicates an expected call of GetProductReviewers.
func (mr *MockProductUsecaseMockRecorder) GetProductReviewers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductReviewers", reflect.TypeOf((*MockProductUsecase)(nil).GetProductReviewers), arg0, arg1)
}

// GetUserFavorite mocks base method.
func (m *MockProductUsecase) GetUserFavorite(arg0 uint64, arg1 *models.Page) ([]*models.ProductListData, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFavorite", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetUserFavorite indicates an expected call of GetUserFavorite.
func (mr *MockProductUsecaseMockRecorder) GetUserFavorite(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFavorite", reflect.TypeOf((*MockProductUsecase)(nil).GetUserFavorite), arg0, arg1)
}

// GetUserReviews mocks base method.
func (m *MockProductUsecase) GetUserReviews(arg0 uint64, arg1 string, arg2 *models.PageWithSort) ([]*models.Review, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReviews", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.Review)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetUserReviews indicates an expected call of GetUserReviews.
func (mr *MockProductUsecaseMockRecorder) GetUserReviews(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReviews", reflect.TypeOf((*MockProductUsecase)(nil).GetUserReviews), arg0, arg1, arg2)
}

// GetWaitingReviews mocks base method.
func (m *MockProductUsecase) GetWaitingReviews(arg0 uint64, arg1 string, arg2 *models.Page) ([]*models.WaitingReview, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWaitingReviews", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*models.WaitingReview)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// GetWaitingReviews indicates an expected call of GetWaitingReviews.
func (mr *MockProductUsecaseMockRecorder) GetWaitingReviews(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWaitingReviews", reflect.TypeOf((*MockProductUsecase)(nil).GetWaitingReviews), arg0, arg1, arg2)
}

// LikeProduct mocks base method.
func (m *MockProductUsecase) LikeProduct(arg0, arg1 uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeProduct", arg0, arg1)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// LikeProduct indicates an expected call of LikeProduct.
func (mr *MockProductUsecaseMockRecorder) LikeProduct(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeProduct", reflect.TypeOf((*MockProductUsecase)(nil).LikeProduct), arg0, arg1)
}

// ListLatest mocks base method.
func (m *MockProductUsecase) ListLatest(arg0 *uint64, arg1 *models.Page) ([]*models.ProductListData, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLatest", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// ListLatest indicates an expected call of ListLatest.
func (mr *MockProductUsecaseMockRecorder) ListLatest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLatest", reflect.TypeOf((*MockProductUsecase)(nil).ListLatest), arg0, arg1)
}

// RecommendationList mocks base method.
func (m *MockProductUsecase) RecommendationList(arg0, arg1 uint64) ([]*models.ProductListData, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecommendationList", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// RecommendationList indicates an expected call of RecommendationList.
func (mr *MockProductUsecaseMockRecorder) RecommendationList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecommendationList", reflect.TypeOf((*MockProductUsecase)(nil).RecommendationList), arg0, arg1)
}

// SetProductBuyer mocks base method.
func (m *MockProductUsecase) SetProductBuyer(arg0, arg1 uint64) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetProductBuyer", arg0, arg1)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// SetProductBuyer indicates an expected call of SetProductBuyer.
func (mr *MockProductUsecaseMockRecorder) SetProductBuyer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetProductBuyer", reflect.TypeOf((*MockProductUsecase)(nil).SetProductBuyer), arg0, arg1)
}

// SetTariff mocks base method.
func (m *MockProductUsecase) SetTariff(arg0 uint64, arg1 int) *errors.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTariff", arg0, arg1)
	ret0, _ := ret[0].(*errors.Error)
	return ret0
}

// SetTariff indicates an expected call of SetTariff.
func (mr *MockProductUsecaseMockRecorder) SetTariff(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTariff", reflect.TypeOf((*MockProductUsecase)(nil).SetTariff), arg0, arg1)
}

// TrendList mocks base method.
func (m *MockProductUsecase) TrendList(arg0 *uint64) ([]*models.ProductListData, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrendList", arg0)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// TrendList indicates an expected call of TrendList.
func (mr *MockProductUsecaseMockRecorder) TrendList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrendList", reflect.TypeOf((*MockProductUsecase)(nil).TrendList), arg0)
}

// UpdatePhoto mocks base method.
func (m *MockProductUsecase) UpdatePhoto(arg0, arg1 uint64, arg2 []*multipart.FileHeader) (*models.ProductData, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePhoto", arg0, arg1, arg2)
	ret0, _ := ret[0].(*models.ProductData)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// UpdatePhoto indicates an expected call of UpdatePhoto.
func (mr *MockProductUsecaseMockRecorder) UpdatePhoto(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePhoto", reflect.TypeOf((*MockProductUsecase)(nil).UpdatePhoto), arg0, arg1, arg2)
}

// UserAdList mocks base method.
func (m *MockProductUsecase) UserAdList(arg0 uint64, arg1 *models.Page) ([]*models.ProductListData, *errors.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAdList", arg0, arg1)
	ret0, _ := ret[0].([]*models.ProductListData)
	ret1, _ := ret[1].(*errors.Error)
	return ret0, ret1
}

// UserAdList indicates an expected call of UserAdList.
func (mr *MockProductUsecaseMockRecorder) UserAdList(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAdList", reflect.TypeOf((*MockProductUsecase)(nil).UserAdList), arg0, arg1)
}
