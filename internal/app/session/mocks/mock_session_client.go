// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_YSNP/internal/app/tools/proto/auth (interfaces: AuthHandlerClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	auth "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/tools/proto/auth"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockAuthHandlerClient is a mock of AuthHandlerClient interface.
type MockAuthHandlerClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlerClientMockRecorder
}

// MockAuthHandlerClientMockRecorder is the mock recorder for MockAuthHandlerClient.
type MockAuthHandlerClientMockRecorder struct {
	mock *MockAuthHandlerClient
}

// NewMockAuthHandlerClient creates a new mock instance.
func NewMockAuthHandlerClient(ctrl *gomock.Controller) *MockAuthHandlerClient {
	mock := &MockAuthHandlerClient{ctrl: ctrl}
	mock.recorder = &MockAuthHandlerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandlerClient) EXPECT() *MockAuthHandlerClientMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockAuthHandlerClient) Check(arg0 context.Context, arg1 *auth.SessionValue, arg2 ...grpc.CallOption) (*auth.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockAuthHandlerClientMockRecorder) Check(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAuthHandlerClient)(nil).Check), varargs...)
}

// Create mocks base method.
func (m *MockAuthHandlerClient) Create(arg0 context.Context, arg1 *auth.Session, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthHandlerClientMockRecorder) Create(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthHandlerClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockAuthHandlerClient) Delete(arg0 context.Context, arg1 *auth.SessionValue, arg2 ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthHandlerClientMockRecorder) Delete(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthHandlerClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockAuthHandlerClient) Get(arg0 context.Context, arg1 *auth.SessionValue, arg2 ...grpc.CallOption) (*auth.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAuthHandlerClientMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAuthHandlerClient)(nil).Get), varargs...)
}
