// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_YSNP/internal/app/user (interfaces: UserRepository)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	models "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUserRepository) Delete(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserRepository)(nil).Delete), arg0)
}

// Insert mocks base method.
func (m *MockUserRepository) Insert(arg0 *models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserRepositoryMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserRepository)(nil).Insert), arg0)
}

// InsertOAuth mocks base method.
func (m *MockUserRepository) InsertOAuth(arg0 *models.UserOAuthRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOAuth", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOAuth indicates an expected call of InsertOAuth.
func (mr *MockUserRepositoryMockRecorder) InsertOAuth(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOAuth", reflect.TypeOf((*MockUserRepository)(nil).InsertOAuth), arg0)
}

// SelectByID mocks base method.
func (m *MockUserRepository) SelectByID(arg0 uint64) (*models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByID", arg0)
	ret0, _ := ret[0].(*models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByID indicates an expected call of SelectByID.
func (mr *MockUserRepositoryMockRecorder) SelectByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByID", reflect.TypeOf((*MockUserRepository)(nil).SelectByID), arg0)
}

// SelectByOAuthID mocks base method.
func (m *MockUserRepository) SelectByOAuthID(arg0 float64) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByOAuthID", arg0)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// SelectByOAuthID indicates an expected call of SelectByOAuthID.
func (mr *MockUserRepositoryMockRecorder) SelectByOAuthID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByOAuthID", reflect.TypeOf((*MockUserRepository)(nil).SelectByOAuthID), arg0)
}

// SelectByTelephone mocks base method.
func (m *MockUserRepository) SelectByTelephone(arg0 string) (*models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectByTelephone", arg0)
	ret0, _ := ret[0].(*models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectByTelephone indicates an expected call of SelectByTelephone.
func (mr *MockUserRepositoryMockRecorder) SelectByTelephone(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectByTelephone", reflect.TypeOf((*MockUserRepository)(nil).SelectByTelephone), arg0)
}

// Update mocks base method.
func (m *MockUserRepository) Update(arg0 *models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserRepository)(nil).Update), arg0)
}
