// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-park-mail-ru/2021_1_YSNP/internal/app/tools/proto/chat (interfaces: ChatClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	chat "github.com/go-park-mail-ru/2021_1_YSNP/internal/app/tools/proto/chat"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockChatClient is a mock of ChatClient interface.
type MockChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockChatClientMockRecorder
}

// MockChatClientMockRecorder is the mock recorder for MockChatClient.
type MockChatClientMockRecorder struct {
	mock *MockChatClient
}

// NewMockChatClient creates a new mock instance.
func NewMockChatClient(ctrl *gomock.Controller) *MockChatClient {
	mock := &MockChatClient{ctrl: ctrl}
	mock.recorder = &MockChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatClient) EXPECT() *MockChatClientMockRecorder {
	return m.recorder
}

// CreateChat mocks base method.
func (m *MockChatClient) CreateChat(arg0 context.Context, arg1 *chat.ChatCreateReq, arg2 ...grpc.CallOption) (*chat.ChatResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateChat", varargs...)
	ret0, _ := ret[0].(*chat.ChatResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateChat indicates an expected call of CreateChat.
func (mr *MockChatClientMockRecorder) CreateChat(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChat", reflect.TypeOf((*MockChatClient)(nil).CreateChat), varargs...)
}

// CreateMessage mocks base method.
func (m *MockChatClient) CreateMessage(arg0 context.Context, arg1 *chat.CreateMessageReq, arg2 ...grpc.CallOption) (*chat.MessageResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMessage", varargs...)
	ret0, _ := ret[0].(*chat.MessageResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockChatClientMockRecorder) CreateMessage(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockChatClient)(nil).CreateMessage), varargs...)
}

// GetChatByID mocks base method.
func (m *MockChatClient) GetChatByID(arg0 context.Context, arg1 *chat.GetChatByIDReq, arg2 ...grpc.CallOption) (*chat.ChatResp, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetChatByID", varargs...)
	ret0, _ := ret[0].(*chat.ChatResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChatByID indicates an expected call of GetChatByID.
func (mr *MockChatClientMockRecorder) GetChatByID(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChatByID", reflect.TypeOf((*MockChatClient)(nil).GetChatByID), varargs...)
}

// GetLastNMessages mocks base method.
func (m *MockChatClient) GetLastNMessages(arg0 context.Context, arg1 *chat.GetLastNMessagesReq, arg2 ...grpc.CallOption) (*chat.MessageRespArray, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLastNMessages", varargs...)
	ret0, _ := ret[0].(*chat.MessageRespArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastNMessages indicates an expected call of GetLastNMessages.
func (mr *MockChatClientMockRecorder) GetLastNMessages(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastNMessages", reflect.TypeOf((*MockChatClient)(nil).GetLastNMessages), varargs...)
}

// GetNMessagesBefore mocks base method.
func (m *MockChatClient) GetNMessagesBefore(arg0 context.Context, arg1 *chat.GetNMessagesReq, arg2 ...grpc.CallOption) (*chat.MessageRespArray, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNMessagesBefore", varargs...)
	ret0, _ := ret[0].(*chat.MessageRespArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNMessagesBefore indicates an expected call of GetNMessagesBefore.
func (mr *MockChatClientMockRecorder) GetNMessagesBefore(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNMessagesBefore", reflect.TypeOf((*MockChatClient)(nil).GetNMessagesBefore), varargs...)
}

// GetUserChats mocks base method.
func (m *MockChatClient) GetUserChats(arg0 context.Context, arg1 *chat.UserID, arg2 ...grpc.CallOption) (*chat.ChatRespArray, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserChats", varargs...)
	ret0, _ := ret[0].(*chat.ChatRespArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserChats indicates an expected call of GetUserChats.
func (mr *MockChatClientMockRecorder) GetUserChats(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserChats", reflect.TypeOf((*MockChatClient)(nil).GetUserChats), varargs...)
}
